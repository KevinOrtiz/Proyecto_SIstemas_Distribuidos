/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package algoritmos;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-31")
public class servicioPartioningMemory {

  public interface Iface {

    public double hillClimbingSimple(List<Double> listMiss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd) throws org.apache.thrift.TException;

    public double hillClimbingRandom(List<Double> listMIss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, int randomSaltos) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void hillClimbingSimple(List<Double> listMiss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hillClimbingRandom(List<Double> listMIss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, int randomSaltos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public double hillClimbingSimple(List<Double> listMiss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd) throws org.apache.thrift.TException
    {
      send_hillClimbingSimple(listMiss, listCache, frequency, sizeCacheMemory, iMemoryValue, sizeAcumulateMemory, bd, cd);
      return recv_hillClimbingSimple();
    }

    public void send_hillClimbingSimple(List<Double> listMiss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd) throws org.apache.thrift.TException
    {
      hillClimbingSimple_args args = new hillClimbingSimple_args();
      args.setListMiss(listMiss);
      args.setListCache(listCache);
      args.setFrequency(frequency);
      args.setSizeCacheMemory(sizeCacheMemory);
      args.setIMemoryValue(iMemoryValue);
      args.setSizeAcumulateMemory(sizeAcumulateMemory);
      args.setBd(bd);
      args.setCd(cd);
      sendBase("hillClimbingSimple", args);
    }

    public double recv_hillClimbingSimple() throws org.apache.thrift.TException
    {
      hillClimbingSimple_result result = new hillClimbingSimple_result();
      receiveBase(result, "hillClimbingSimple");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hillClimbingSimple failed: unknown result");
    }

    public double hillClimbingRandom(List<Double> listMIss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, int randomSaltos) throws org.apache.thrift.TException
    {
      send_hillClimbingRandom(listMIss, listCache, frequency, sizeCacheMemory, iMemoryValue, sizeAcumulateMemory, bd, cd, randomSaltos);
      return recv_hillClimbingRandom();
    }

    public void send_hillClimbingRandom(List<Double> listMIss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, int randomSaltos) throws org.apache.thrift.TException
    {
      hillClimbingRandom_args args = new hillClimbingRandom_args();
      args.setListMIss(listMIss);
      args.setListCache(listCache);
      args.setFrequency(frequency);
      args.setSizeCacheMemory(sizeCacheMemory);
      args.setIMemoryValue(iMemoryValue);
      args.setSizeAcumulateMemory(sizeAcumulateMemory);
      args.setBd(bd);
      args.setCd(cd);
      args.setRandomSaltos(randomSaltos);
      sendBase("hillClimbingRandom", args);
    }

    public double recv_hillClimbingRandom() throws org.apache.thrift.TException
    {
      hillClimbingRandom_result result = new hillClimbingRandom_result();
      receiveBase(result, "hillClimbingRandom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hillClimbingRandom failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void hillClimbingSimple(List<Double> listMiss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hillClimbingSimple_call method_call = new hillClimbingSimple_call(listMiss, listCache, frequency, sizeCacheMemory, iMemoryValue, sizeAcumulateMemory, bd, cd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hillClimbingSimple_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Double> listMiss;
      private List<Double> listCache;
      private double frequency;
      private double sizeCacheMemory;
      private double iMemoryValue;
      private double sizeAcumulateMemory;
      private double bd;
      private double cd;
      public hillClimbingSimple_call(List<Double> listMiss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listMiss = listMiss;
        this.listCache = listCache;
        this.frequency = frequency;
        this.sizeCacheMemory = sizeCacheMemory;
        this.iMemoryValue = iMemoryValue;
        this.sizeAcumulateMemory = sizeAcumulateMemory;
        this.bd = bd;
        this.cd = cd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hillClimbingSimple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hillClimbingSimple_args args = new hillClimbingSimple_args();
        args.setListMiss(listMiss);
        args.setListCache(listCache);
        args.setFrequency(frequency);
        args.setSizeCacheMemory(sizeCacheMemory);
        args.setIMemoryValue(iMemoryValue);
        args.setSizeAcumulateMemory(sizeAcumulateMemory);
        args.setBd(bd);
        args.setCd(cd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hillClimbingSimple();
      }
    }

    public void hillClimbingRandom(List<Double> listMIss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, int randomSaltos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hillClimbingRandom_call method_call = new hillClimbingRandom_call(listMIss, listCache, frequency, sizeCacheMemory, iMemoryValue, sizeAcumulateMemory, bd, cd, randomSaltos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hillClimbingRandom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Double> listMIss;
      private List<Double> listCache;
      private double frequency;
      private double sizeCacheMemory;
      private double iMemoryValue;
      private double sizeAcumulateMemory;
      private double bd;
      private double cd;
      private int randomSaltos;
      public hillClimbingRandom_call(List<Double> listMIss, List<Double> listCache, double frequency, double sizeCacheMemory, double iMemoryValue, double sizeAcumulateMemory, double bd, double cd, int randomSaltos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listMIss = listMIss;
        this.listCache = listCache;
        this.frequency = frequency;
        this.sizeCacheMemory = sizeCacheMemory;
        this.iMemoryValue = iMemoryValue;
        this.sizeAcumulateMemory = sizeAcumulateMemory;
        this.bd = bd;
        this.cd = cd;
        this.randomSaltos = randomSaltos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hillClimbingRandom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hillClimbingRandom_args args = new hillClimbingRandom_args();
        args.setListMIss(listMIss);
        args.setListCache(listCache);
        args.setFrequency(frequency);
        args.setSizeCacheMemory(sizeCacheMemory);
        args.setIMemoryValue(iMemoryValue);
        args.setSizeAcumulateMemory(sizeAcumulateMemory);
        args.setBd(bd);
        args.setCd(cd);
        args.setRandomSaltos(randomSaltos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hillClimbingRandom();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("hillClimbingSimple", new hillClimbingSimple());
      processMap.put("hillClimbingRandom", new hillClimbingRandom());
      return processMap;
    }

    public static class hillClimbingSimple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hillClimbingSimple_args> {
      public hillClimbingSimple() {
        super("hillClimbingSimple");
      }

      public hillClimbingSimple_args getEmptyArgsInstance() {
        return new hillClimbingSimple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hillClimbingSimple_result getResult(I iface, hillClimbingSimple_args args) throws org.apache.thrift.TException {
        hillClimbingSimple_result result = new hillClimbingSimple_result();
        result.success = iface.hillClimbingSimple(args.listMiss, args.listCache, args.frequency, args.sizeCacheMemory, args.iMemoryValue, args.sizeAcumulateMemory, args.bd, args.cd);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class hillClimbingRandom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hillClimbingRandom_args> {
      public hillClimbingRandom() {
        super("hillClimbingRandom");
      }

      public hillClimbingRandom_args getEmptyArgsInstance() {
        return new hillClimbingRandom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hillClimbingRandom_result getResult(I iface, hillClimbingRandom_args args) throws org.apache.thrift.TException {
        hillClimbingRandom_result result = new hillClimbingRandom_result();
        result.success = iface.hillClimbingRandom(args.listMIss, args.listCache, args.frequency, args.sizeCacheMemory, args.iMemoryValue, args.sizeAcumulateMemory, args.bd, args.cd, args.randomSaltos);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("hillClimbingSimple", new hillClimbingSimple());
      processMap.put("hillClimbingRandom", new hillClimbingRandom());
      return processMap;
    }

    public static class hillClimbingSimple<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hillClimbingSimple_args, Double> {
      public hillClimbingSimple() {
        super("hillClimbingSimple");
      }

      public hillClimbingSimple_args getEmptyArgsInstance() {
        return new hillClimbingSimple_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            hillClimbingSimple_result result = new hillClimbingSimple_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hillClimbingSimple_result result = new hillClimbingSimple_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hillClimbingSimple_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.hillClimbingSimple(args.listMiss, args.listCache, args.frequency, args.sizeCacheMemory, args.iMemoryValue, args.sizeAcumulateMemory, args.bd, args.cd,resultHandler);
      }
    }

    public static class hillClimbingRandom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hillClimbingRandom_args, Double> {
      public hillClimbingRandom() {
        super("hillClimbingRandom");
      }

      public hillClimbingRandom_args getEmptyArgsInstance() {
        return new hillClimbingRandom_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            hillClimbingRandom_result result = new hillClimbingRandom_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hillClimbingRandom_result result = new hillClimbingRandom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hillClimbingRandom_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.hillClimbingRandom(args.listMIss, args.listCache, args.frequency, args.sizeCacheMemory, args.iMemoryValue, args.sizeAcumulateMemory, args.bd, args.cd, args.randomSaltos,resultHandler);
      }
    }

  }

  public static class hillClimbingSimple_args implements org.apache.thrift.TBase<hillClimbingSimple_args, hillClimbingSimple_args._Fields>, java.io.Serializable, Cloneable, Comparable<hillClimbingSimple_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hillClimbingSimple_args");

    private static final org.apache.thrift.protocol.TField LIST_MISS_FIELD_DESC = new org.apache.thrift.protocol.TField("listMiss", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("listCache", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField SIZE_CACHE_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeCacheMemory", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField I_MEMORY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iMemoryValue", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField SIZE_ACUMULATE_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeAcumulateMemory", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField BD_FIELD_DESC = new org.apache.thrift.protocol.TField("bd", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField CD_FIELD_DESC = new org.apache.thrift.protocol.TField("cd", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hillClimbingSimple_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hillClimbingSimple_argsTupleSchemeFactory());
    }

    public List<Double> listMiss; // required
    public List<Double> listCache; // required
    public double frequency; // required
    public double sizeCacheMemory; // required
    public double iMemoryValue; // required
    public double sizeAcumulateMemory; // required
    public double bd; // required
    public double cd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_MISS((short)1, "listMiss"),
      LIST_CACHE((short)2, "listCache"),
      FREQUENCY((short)3, "frequency"),
      SIZE_CACHE_MEMORY((short)4, "sizeCacheMemory"),
      I_MEMORY_VALUE((short)5, "iMemoryValue"),
      SIZE_ACUMULATE_MEMORY((short)6, "sizeAcumulateMemory"),
      BD((short)7, "bd"),
      CD((short)8, "cd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_MISS
            return LIST_MISS;
          case 2: // LIST_CACHE
            return LIST_CACHE;
          case 3: // FREQUENCY
            return FREQUENCY;
          case 4: // SIZE_CACHE_MEMORY
            return SIZE_CACHE_MEMORY;
          case 5: // I_MEMORY_VALUE
            return I_MEMORY_VALUE;
          case 6: // SIZE_ACUMULATE_MEMORY
            return SIZE_ACUMULATE_MEMORY;
          case 7: // BD
            return BD;
          case 8: // CD
            return CD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FREQUENCY_ISSET_ID = 0;
    private static final int __SIZECACHEMEMORY_ISSET_ID = 1;
    private static final int __IMEMORYVALUE_ISSET_ID = 2;
    private static final int __SIZEACUMULATEMEMORY_ISSET_ID = 3;
    private static final int __BD_ISSET_ID = 4;
    private static final int __CD_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_MISS, new org.apache.thrift.meta_data.FieldMetaData("listMiss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.LIST_CACHE, new org.apache.thrift.meta_data.FieldMetaData("listCache", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SIZE_CACHE_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("sizeCacheMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.I_MEMORY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("iMemoryValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SIZE_ACUMULATE_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("sizeAcumulateMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.BD, new org.apache.thrift.meta_data.FieldMetaData("bd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CD, new org.apache.thrift.meta_data.FieldMetaData("cd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hillClimbingSimple_args.class, metaDataMap);
    }

    public hillClimbingSimple_args() {
    }

    public hillClimbingSimple_args(
      List<Double> listMiss,
      List<Double> listCache,
      double frequency,
      double sizeCacheMemory,
      double iMemoryValue,
      double sizeAcumulateMemory,
      double bd,
      double cd)
    {
      this();
      this.listMiss = listMiss;
      this.listCache = listCache;
      this.frequency = frequency;
      setFrequencyIsSet(true);
      this.sizeCacheMemory = sizeCacheMemory;
      setSizeCacheMemoryIsSet(true);
      this.iMemoryValue = iMemoryValue;
      setIMemoryValueIsSet(true);
      this.sizeAcumulateMemory = sizeAcumulateMemory;
      setSizeAcumulateMemoryIsSet(true);
      this.bd = bd;
      setBdIsSet(true);
      this.cd = cd;
      setCdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hillClimbingSimple_args(hillClimbingSimple_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetListMiss()) {
        List<Double> __this__listMiss = new ArrayList<Double>(other.listMiss);
        this.listMiss = __this__listMiss;
      }
      if (other.isSetListCache()) {
        List<Double> __this__listCache = new ArrayList<Double>(other.listCache);
        this.listCache = __this__listCache;
      }
      this.frequency = other.frequency;
      this.sizeCacheMemory = other.sizeCacheMemory;
      this.iMemoryValue = other.iMemoryValue;
      this.sizeAcumulateMemory = other.sizeAcumulateMemory;
      this.bd = other.bd;
      this.cd = other.cd;
    }

    public hillClimbingSimple_args deepCopy() {
      return new hillClimbingSimple_args(this);
    }

    @Override
    public void clear() {
      this.listMiss = null;
      this.listCache = null;
      setFrequencyIsSet(false);
      this.frequency = 0.0;
      setSizeCacheMemoryIsSet(false);
      this.sizeCacheMemory = 0.0;
      setIMemoryValueIsSet(false);
      this.iMemoryValue = 0.0;
      setSizeAcumulateMemoryIsSet(false);
      this.sizeAcumulateMemory = 0.0;
      setBdIsSet(false);
      this.bd = 0.0;
      setCdIsSet(false);
      this.cd = 0.0;
    }

    public int getListMissSize() {
      return (this.listMiss == null) ? 0 : this.listMiss.size();
    }

    public java.util.Iterator<Double> getListMissIterator() {
      return (this.listMiss == null) ? null : this.listMiss.iterator();
    }

    public void addToListMiss(double elem) {
      if (this.listMiss == null) {
        this.listMiss = new ArrayList<Double>();
      }
      this.listMiss.add(elem);
    }

    public List<Double> getListMiss() {
      return this.listMiss;
    }

    public hillClimbingSimple_args setListMiss(List<Double> listMiss) {
      this.listMiss = listMiss;
      return this;
    }

    public void unsetListMiss() {
      this.listMiss = null;
    }

    /** Returns true if field listMiss is set (has been assigned a value) and false otherwise */
    public boolean isSetListMiss() {
      return this.listMiss != null;
    }

    public void setListMissIsSet(boolean value) {
      if (!value) {
        this.listMiss = null;
      }
    }

    public int getListCacheSize() {
      return (this.listCache == null) ? 0 : this.listCache.size();
    }

    public java.util.Iterator<Double> getListCacheIterator() {
      return (this.listCache == null) ? null : this.listCache.iterator();
    }

    public void addToListCache(double elem) {
      if (this.listCache == null) {
        this.listCache = new ArrayList<Double>();
      }
      this.listCache.add(elem);
    }

    public List<Double> getListCache() {
      return this.listCache;
    }

    public hillClimbingSimple_args setListCache(List<Double> listCache) {
      this.listCache = listCache;
      return this;
    }

    public void unsetListCache() {
      this.listCache = null;
    }

    /** Returns true if field listCache is set (has been assigned a value) and false otherwise */
    public boolean isSetListCache() {
      return this.listCache != null;
    }

    public void setListCacheIsSet(boolean value) {
      if (!value) {
        this.listCache = null;
      }
    }

    public double getFrequency() {
      return this.frequency;
    }

    public hillClimbingSimple_args setFrequency(double frequency) {
      this.frequency = frequency;
      setFrequencyIsSet(true);
      return this;
    }

    public void unsetFrequency() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
    }

    /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
    public boolean isSetFrequency() {
      return EncodingUtils.testBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
    }

    public void setFrequencyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQUENCY_ISSET_ID, value);
    }

    public double getSizeCacheMemory() {
      return this.sizeCacheMemory;
    }

    public hillClimbingSimple_args setSizeCacheMemory(double sizeCacheMemory) {
      this.sizeCacheMemory = sizeCacheMemory;
      setSizeCacheMemoryIsSet(true);
      return this;
    }

    public void unsetSizeCacheMemory() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZECACHEMEMORY_ISSET_ID);
    }

    /** Returns true if field sizeCacheMemory is set (has been assigned a value) and false otherwise */
    public boolean isSetSizeCacheMemory() {
      return EncodingUtils.testBit(__isset_bitfield, __SIZECACHEMEMORY_ISSET_ID);
    }

    public void setSizeCacheMemoryIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZECACHEMEMORY_ISSET_ID, value);
    }

    public double getIMemoryValue() {
      return this.iMemoryValue;
    }

    public hillClimbingSimple_args setIMemoryValue(double iMemoryValue) {
      this.iMemoryValue = iMemoryValue;
      setIMemoryValueIsSet(true);
      return this;
    }

    public void unsetIMemoryValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMEMORYVALUE_ISSET_ID);
    }

    /** Returns true if field iMemoryValue is set (has been assigned a value) and false otherwise */
    public boolean isSetIMemoryValue() {
      return EncodingUtils.testBit(__isset_bitfield, __IMEMORYVALUE_ISSET_ID);
    }

    public void setIMemoryValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMEMORYVALUE_ISSET_ID, value);
    }

    public double getSizeAcumulateMemory() {
      return this.sizeAcumulateMemory;
    }

    public hillClimbingSimple_args setSizeAcumulateMemory(double sizeAcumulateMemory) {
      this.sizeAcumulateMemory = sizeAcumulateMemory;
      setSizeAcumulateMemoryIsSet(true);
      return this;
    }

    public void unsetSizeAcumulateMemory() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZEACUMULATEMEMORY_ISSET_ID);
    }

    /** Returns true if field sizeAcumulateMemory is set (has been assigned a value) and false otherwise */
    public boolean isSetSizeAcumulateMemory() {
      return EncodingUtils.testBit(__isset_bitfield, __SIZEACUMULATEMEMORY_ISSET_ID);
    }

    public void setSizeAcumulateMemoryIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZEACUMULATEMEMORY_ISSET_ID, value);
    }

    public double getBd() {
      return this.bd;
    }

    public hillClimbingSimple_args setBd(double bd) {
      this.bd = bd;
      setBdIsSet(true);
      return this;
    }

    public void unsetBd() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BD_ISSET_ID);
    }

    /** Returns true if field bd is set (has been assigned a value) and false otherwise */
    public boolean isSetBd() {
      return EncodingUtils.testBit(__isset_bitfield, __BD_ISSET_ID);
    }

    public void setBdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BD_ISSET_ID, value);
    }

    public double getCd() {
      return this.cd;
    }

    public hillClimbingSimple_args setCd(double cd) {
      this.cd = cd;
      setCdIsSet(true);
      return this;
    }

    public void unsetCd() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CD_ISSET_ID);
    }

    /** Returns true if field cd is set (has been assigned a value) and false otherwise */
    public boolean isSetCd() {
      return EncodingUtils.testBit(__isset_bitfield, __CD_ISSET_ID);
    }

    public void setCdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_MISS:
        if (value == null) {
          unsetListMiss();
        } else {
          setListMiss((List<Double>)value);
        }
        break;

      case LIST_CACHE:
        if (value == null) {
          unsetListCache();
        } else {
          setListCache((List<Double>)value);
        }
        break;

      case FREQUENCY:
        if (value == null) {
          unsetFrequency();
        } else {
          setFrequency((Double)value);
        }
        break;

      case SIZE_CACHE_MEMORY:
        if (value == null) {
          unsetSizeCacheMemory();
        } else {
          setSizeCacheMemory((Double)value);
        }
        break;

      case I_MEMORY_VALUE:
        if (value == null) {
          unsetIMemoryValue();
        } else {
          setIMemoryValue((Double)value);
        }
        break;

      case SIZE_ACUMULATE_MEMORY:
        if (value == null) {
          unsetSizeAcumulateMemory();
        } else {
          setSizeAcumulateMemory((Double)value);
        }
        break;

      case BD:
        if (value == null) {
          unsetBd();
        } else {
          setBd((Double)value);
        }
        break;

      case CD:
        if (value == null) {
          unsetCd();
        } else {
          setCd((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_MISS:
        return getListMiss();

      case LIST_CACHE:
        return getListCache();

      case FREQUENCY:
        return getFrequency();

      case SIZE_CACHE_MEMORY:
        return getSizeCacheMemory();

      case I_MEMORY_VALUE:
        return getIMemoryValue();

      case SIZE_ACUMULATE_MEMORY:
        return getSizeAcumulateMemory();

      case BD:
        return getBd();

      case CD:
        return getCd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_MISS:
        return isSetListMiss();
      case LIST_CACHE:
        return isSetListCache();
      case FREQUENCY:
        return isSetFrequency();
      case SIZE_CACHE_MEMORY:
        return isSetSizeCacheMemory();
      case I_MEMORY_VALUE:
        return isSetIMemoryValue();
      case SIZE_ACUMULATE_MEMORY:
        return isSetSizeAcumulateMemory();
      case BD:
        return isSetBd();
      case CD:
        return isSetCd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hillClimbingSimple_args)
        return this.equals((hillClimbingSimple_args)that);
      return false;
    }

    public boolean equals(hillClimbingSimple_args that) {
      if (that == null)
        return false;

      boolean this_present_listMiss = true && this.isSetListMiss();
      boolean that_present_listMiss = true && that.isSetListMiss();
      if (this_present_listMiss || that_present_listMiss) {
        if (!(this_present_listMiss && that_present_listMiss))
          return false;
        if (!this.listMiss.equals(that.listMiss))
          return false;
      }

      boolean this_present_listCache = true && this.isSetListCache();
      boolean that_present_listCache = true && that.isSetListCache();
      if (this_present_listCache || that_present_listCache) {
        if (!(this_present_listCache && that_present_listCache))
          return false;
        if (!this.listCache.equals(that.listCache))
          return false;
      }

      boolean this_present_frequency = true;
      boolean that_present_frequency = true;
      if (this_present_frequency || that_present_frequency) {
        if (!(this_present_frequency && that_present_frequency))
          return false;
        if (this.frequency != that.frequency)
          return false;
      }

      boolean this_present_sizeCacheMemory = true;
      boolean that_present_sizeCacheMemory = true;
      if (this_present_sizeCacheMemory || that_present_sizeCacheMemory) {
        if (!(this_present_sizeCacheMemory && that_present_sizeCacheMemory))
          return false;
        if (this.sizeCacheMemory != that.sizeCacheMemory)
          return false;
      }

      boolean this_present_iMemoryValue = true;
      boolean that_present_iMemoryValue = true;
      if (this_present_iMemoryValue || that_present_iMemoryValue) {
        if (!(this_present_iMemoryValue && that_present_iMemoryValue))
          return false;
        if (this.iMemoryValue != that.iMemoryValue)
          return false;
      }

      boolean this_present_sizeAcumulateMemory = true;
      boolean that_present_sizeAcumulateMemory = true;
      if (this_present_sizeAcumulateMemory || that_present_sizeAcumulateMemory) {
        if (!(this_present_sizeAcumulateMemory && that_present_sizeAcumulateMemory))
          return false;
        if (this.sizeAcumulateMemory != that.sizeAcumulateMemory)
          return false;
      }

      boolean this_present_bd = true;
      boolean that_present_bd = true;
      if (this_present_bd || that_present_bd) {
        if (!(this_present_bd && that_present_bd))
          return false;
        if (this.bd != that.bd)
          return false;
      }

      boolean this_present_cd = true;
      boolean that_present_cd = true;
      if (this_present_cd || that_present_cd) {
        if (!(this_present_cd && that_present_cd))
          return false;
        if (this.cd != that.cd)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listMiss = true && (isSetListMiss());
      list.add(present_listMiss);
      if (present_listMiss)
        list.add(listMiss);

      boolean present_listCache = true && (isSetListCache());
      list.add(present_listCache);
      if (present_listCache)
        list.add(listCache);

      boolean present_frequency = true;
      list.add(present_frequency);
      if (present_frequency)
        list.add(frequency);

      boolean present_sizeCacheMemory = true;
      list.add(present_sizeCacheMemory);
      if (present_sizeCacheMemory)
        list.add(sizeCacheMemory);

      boolean present_iMemoryValue = true;
      list.add(present_iMemoryValue);
      if (present_iMemoryValue)
        list.add(iMemoryValue);

      boolean present_sizeAcumulateMemory = true;
      list.add(present_sizeAcumulateMemory);
      if (present_sizeAcumulateMemory)
        list.add(sizeAcumulateMemory);

      boolean present_bd = true;
      list.add(present_bd);
      if (present_bd)
        list.add(bd);

      boolean present_cd = true;
      list.add(present_cd);
      if (present_cd)
        list.add(cd);

      return list.hashCode();
    }

    @Override
    public int compareTo(hillClimbingSimple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListMiss()).compareTo(other.isSetListMiss());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListMiss()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listMiss, other.listMiss);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListCache()).compareTo(other.isSetListCache());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListCache()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listCache, other.listCache);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(other.isSetFrequency());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrequency()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, other.frequency);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSizeCacheMemory()).compareTo(other.isSetSizeCacheMemory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSizeCacheMemory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeCacheMemory, other.sizeCacheMemory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIMemoryValue()).compareTo(other.isSetIMemoryValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIMemoryValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iMemoryValue, other.iMemoryValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSizeAcumulateMemory()).compareTo(other.isSetSizeAcumulateMemory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSizeAcumulateMemory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeAcumulateMemory, other.sizeAcumulateMemory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBd()).compareTo(other.isSetBd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bd, other.bd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCd()).compareTo(other.isSetCd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cd, other.cd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hillClimbingSimple_args(");
      boolean first = true;

      sb.append("listMiss:");
      if (this.listMiss == null) {
        sb.append("null");
      } else {
        sb.append(this.listMiss);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listCache:");
      if (this.listCache == null) {
        sb.append("null");
      } else {
        sb.append(this.listCache);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("frequency:");
      sb.append(this.frequency);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sizeCacheMemory:");
      sb.append(this.sizeCacheMemory);
      first = false;
      if (!first) sb.append(", ");
      sb.append("iMemoryValue:");
      sb.append(this.iMemoryValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sizeAcumulateMemory:");
      sb.append(this.sizeAcumulateMemory);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bd:");
      sb.append(this.bd);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cd:");
      sb.append(this.cd);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hillClimbingSimple_argsStandardSchemeFactory implements SchemeFactory {
      public hillClimbingSimple_argsStandardScheme getScheme() {
        return new hillClimbingSimple_argsStandardScheme();
      }
    }

    private static class hillClimbingSimple_argsStandardScheme extends StandardScheme<hillClimbingSimple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hillClimbingSimple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_MISS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.listMiss = new ArrayList<Double>(_list0.size);
                  double _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readDouble();
                    struct.listMiss.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setListMissIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_CACHE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.listCache = new ArrayList<Double>(_list3.size);
                  double _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = iprot.readDouble();
                    struct.listCache.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setListCacheIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FREQUENCY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.frequency = iprot.readDouble();
                struct.setFrequencyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SIZE_CACHE_MEMORY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.sizeCacheMemory = iprot.readDouble();
                struct.setSizeCacheMemoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // I_MEMORY_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.iMemoryValue = iprot.readDouble();
                struct.setIMemoryValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SIZE_ACUMULATE_MEMORY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.sizeAcumulateMemory = iprot.readDouble();
                struct.setSizeAcumulateMemoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // BD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.bd = iprot.readDouble();
                struct.setBdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.cd = iprot.readDouble();
                struct.setCdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hillClimbingSimple_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listMiss != null) {
          oprot.writeFieldBegin(LIST_MISS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.listMiss.size()));
            for (double _iter6 : struct.listMiss)
            {
              oprot.writeDouble(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.listCache != null) {
          oprot.writeFieldBegin(LIST_CACHE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.listCache.size()));
            for (double _iter7 : struct.listCache)
            {
              oprot.writeDouble(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
        oprot.writeDouble(struct.frequency);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_CACHE_MEMORY_FIELD_DESC);
        oprot.writeDouble(struct.sizeCacheMemory);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(I_MEMORY_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.iMemoryValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_ACUMULATE_MEMORY_FIELD_DESC);
        oprot.writeDouble(struct.sizeAcumulateMemory);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BD_FIELD_DESC);
        oprot.writeDouble(struct.bd);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CD_FIELD_DESC);
        oprot.writeDouble(struct.cd);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hillClimbingSimple_argsTupleSchemeFactory implements SchemeFactory {
      public hillClimbingSimple_argsTupleScheme getScheme() {
        return new hillClimbingSimple_argsTupleScheme();
      }
    }

    private static class hillClimbingSimple_argsTupleScheme extends TupleScheme<hillClimbingSimple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hillClimbingSimple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListMiss()) {
          optionals.set(0);
        }
        if (struct.isSetListCache()) {
          optionals.set(1);
        }
        if (struct.isSetFrequency()) {
          optionals.set(2);
        }
        if (struct.isSetSizeCacheMemory()) {
          optionals.set(3);
        }
        if (struct.isSetIMemoryValue()) {
          optionals.set(4);
        }
        if (struct.isSetSizeAcumulateMemory()) {
          optionals.set(5);
        }
        if (struct.isSetBd()) {
          optionals.set(6);
        }
        if (struct.isSetCd()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetListMiss()) {
          {
            oprot.writeI32(struct.listMiss.size());
            for (double _iter8 : struct.listMiss)
            {
              oprot.writeDouble(_iter8);
            }
          }
        }
        if (struct.isSetListCache()) {
          {
            oprot.writeI32(struct.listCache.size());
            for (double _iter9 : struct.listCache)
            {
              oprot.writeDouble(_iter9);
            }
          }
        }
        if (struct.isSetFrequency()) {
          oprot.writeDouble(struct.frequency);
        }
        if (struct.isSetSizeCacheMemory()) {
          oprot.writeDouble(struct.sizeCacheMemory);
        }
        if (struct.isSetIMemoryValue()) {
          oprot.writeDouble(struct.iMemoryValue);
        }
        if (struct.isSetSizeAcumulateMemory()) {
          oprot.writeDouble(struct.sizeAcumulateMemory);
        }
        if (struct.isSetBd()) {
          oprot.writeDouble(struct.bd);
        }
        if (struct.isSetCd()) {
          oprot.writeDouble(struct.cd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hillClimbingSimple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.listMiss = new ArrayList<Double>(_list10.size);
            double _elem11;
            for (int _i12 = 0; _i12 < _list10.size; ++_i12)
            {
              _elem11 = iprot.readDouble();
              struct.listMiss.add(_elem11);
            }
          }
          struct.setListMissIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.listCache = new ArrayList<Double>(_list13.size);
            double _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readDouble();
              struct.listCache.add(_elem14);
            }
          }
          struct.setListCacheIsSet(true);
        }
        if (incoming.get(2)) {
          struct.frequency = iprot.readDouble();
          struct.setFrequencyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sizeCacheMemory = iprot.readDouble();
          struct.setSizeCacheMemoryIsSet(true);
        }
        if (incoming.get(4)) {
          struct.iMemoryValue = iprot.readDouble();
          struct.setIMemoryValueIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sizeAcumulateMemory = iprot.readDouble();
          struct.setSizeAcumulateMemoryIsSet(true);
        }
        if (incoming.get(6)) {
          struct.bd = iprot.readDouble();
          struct.setBdIsSet(true);
        }
        if (incoming.get(7)) {
          struct.cd = iprot.readDouble();
          struct.setCdIsSet(true);
        }
      }
    }

  }

  public static class hillClimbingSimple_result implements org.apache.thrift.TBase<hillClimbingSimple_result, hillClimbingSimple_result._Fields>, java.io.Serializable, Cloneable, Comparable<hillClimbingSimple_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hillClimbingSimple_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hillClimbingSimple_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hillClimbingSimple_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hillClimbingSimple_result.class, metaDataMap);
    }

    public hillClimbingSimple_result() {
    }

    public hillClimbingSimple_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hillClimbingSimple_result(hillClimbingSimple_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public hillClimbingSimple_result deepCopy() {
      return new hillClimbingSimple_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public hillClimbingSimple_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hillClimbingSimple_result)
        return this.equals((hillClimbingSimple_result)that);
      return false;
    }

    public boolean equals(hillClimbingSimple_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hillClimbingSimple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hillClimbingSimple_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hillClimbingSimple_resultStandardSchemeFactory implements SchemeFactory {
      public hillClimbingSimple_resultStandardScheme getScheme() {
        return new hillClimbingSimple_resultStandardScheme();
      }
    }

    private static class hillClimbingSimple_resultStandardScheme extends StandardScheme<hillClimbingSimple_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hillClimbingSimple_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hillClimbingSimple_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hillClimbingSimple_resultTupleSchemeFactory implements SchemeFactory {
      public hillClimbingSimple_resultTupleScheme getScheme() {
        return new hillClimbingSimple_resultTupleScheme();
      }
    }

    private static class hillClimbingSimple_resultTupleScheme extends TupleScheme<hillClimbingSimple_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hillClimbingSimple_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hillClimbingSimple_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hillClimbingRandom_args implements org.apache.thrift.TBase<hillClimbingRandom_args, hillClimbingRandom_args._Fields>, java.io.Serializable, Cloneable, Comparable<hillClimbingRandom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hillClimbingRandom_args");

    private static final org.apache.thrift.protocol.TField LIST_MISS_FIELD_DESC = new org.apache.thrift.protocol.TField("listMIss", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("listCache", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField SIZE_CACHE_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeCacheMemory", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField I_MEMORY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("iMemoryValue", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField SIZE_ACUMULATE_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeAcumulateMemory", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField BD_FIELD_DESC = new org.apache.thrift.protocol.TField("bd", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField CD_FIELD_DESC = new org.apache.thrift.protocol.TField("cd", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
    private static final org.apache.thrift.protocol.TField RANDOM_SALTOS_FIELD_DESC = new org.apache.thrift.protocol.TField("randomSaltos", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hillClimbingRandom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hillClimbingRandom_argsTupleSchemeFactory());
    }

    public List<Double> listMIss; // required
    public List<Double> listCache; // required
    public double frequency; // required
    public double sizeCacheMemory; // required
    public double iMemoryValue; // required
    public double sizeAcumulateMemory; // required
    public double bd; // required
    public double cd; // required
    public int randomSaltos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_MISS((short)1, "listMIss"),
      LIST_CACHE((short)2, "listCache"),
      FREQUENCY((short)3, "frequency"),
      SIZE_CACHE_MEMORY((short)4, "sizeCacheMemory"),
      I_MEMORY_VALUE((short)5, "iMemoryValue"),
      SIZE_ACUMULATE_MEMORY((short)6, "sizeAcumulateMemory"),
      BD((short)7, "bd"),
      CD((short)8, "cd"),
      RANDOM_SALTOS((short)9, "randomSaltos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_MISS
            return LIST_MISS;
          case 2: // LIST_CACHE
            return LIST_CACHE;
          case 3: // FREQUENCY
            return FREQUENCY;
          case 4: // SIZE_CACHE_MEMORY
            return SIZE_CACHE_MEMORY;
          case 5: // I_MEMORY_VALUE
            return I_MEMORY_VALUE;
          case 6: // SIZE_ACUMULATE_MEMORY
            return SIZE_ACUMULATE_MEMORY;
          case 7: // BD
            return BD;
          case 8: // CD
            return CD;
          case 9: // RANDOM_SALTOS
            return RANDOM_SALTOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FREQUENCY_ISSET_ID = 0;
    private static final int __SIZECACHEMEMORY_ISSET_ID = 1;
    private static final int __IMEMORYVALUE_ISSET_ID = 2;
    private static final int __SIZEACUMULATEMEMORY_ISSET_ID = 3;
    private static final int __BD_ISSET_ID = 4;
    private static final int __CD_ISSET_ID = 5;
    private static final int __RANDOMSALTOS_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_MISS, new org.apache.thrift.meta_data.FieldMetaData("listMIss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.LIST_CACHE, new org.apache.thrift.meta_data.FieldMetaData("listCache", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SIZE_CACHE_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("sizeCacheMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.I_MEMORY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("iMemoryValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.SIZE_ACUMULATE_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("sizeAcumulateMemory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.BD, new org.apache.thrift.meta_data.FieldMetaData("bd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CD, new org.apache.thrift.meta_data.FieldMetaData("cd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.RANDOM_SALTOS, new org.apache.thrift.meta_data.FieldMetaData("randomSaltos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hillClimbingRandom_args.class, metaDataMap);
    }

    public hillClimbingRandom_args() {
    }

    public hillClimbingRandom_args(
      List<Double> listMIss,
      List<Double> listCache,
      double frequency,
      double sizeCacheMemory,
      double iMemoryValue,
      double sizeAcumulateMemory,
      double bd,
      double cd,
      int randomSaltos)
    {
      this();
      this.listMIss = listMIss;
      this.listCache = listCache;
      this.frequency = frequency;
      setFrequencyIsSet(true);
      this.sizeCacheMemory = sizeCacheMemory;
      setSizeCacheMemoryIsSet(true);
      this.iMemoryValue = iMemoryValue;
      setIMemoryValueIsSet(true);
      this.sizeAcumulateMemory = sizeAcumulateMemory;
      setSizeAcumulateMemoryIsSet(true);
      this.bd = bd;
      setBdIsSet(true);
      this.cd = cd;
      setCdIsSet(true);
      this.randomSaltos = randomSaltos;
      setRandomSaltosIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hillClimbingRandom_args(hillClimbingRandom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetListMIss()) {
        List<Double> __this__listMIss = new ArrayList<Double>(other.listMIss);
        this.listMIss = __this__listMIss;
      }
      if (other.isSetListCache()) {
        List<Double> __this__listCache = new ArrayList<Double>(other.listCache);
        this.listCache = __this__listCache;
      }
      this.frequency = other.frequency;
      this.sizeCacheMemory = other.sizeCacheMemory;
      this.iMemoryValue = other.iMemoryValue;
      this.sizeAcumulateMemory = other.sizeAcumulateMemory;
      this.bd = other.bd;
      this.cd = other.cd;
      this.randomSaltos = other.randomSaltos;
    }

    public hillClimbingRandom_args deepCopy() {
      return new hillClimbingRandom_args(this);
    }

    @Override
    public void clear() {
      this.listMIss = null;
      this.listCache = null;
      setFrequencyIsSet(false);
      this.frequency = 0.0;
      setSizeCacheMemoryIsSet(false);
      this.sizeCacheMemory = 0.0;
      setIMemoryValueIsSet(false);
      this.iMemoryValue = 0.0;
      setSizeAcumulateMemoryIsSet(false);
      this.sizeAcumulateMemory = 0.0;
      setBdIsSet(false);
      this.bd = 0.0;
      setCdIsSet(false);
      this.cd = 0.0;
      setRandomSaltosIsSet(false);
      this.randomSaltos = 0;
    }

    public int getListMIssSize() {
      return (this.listMIss == null) ? 0 : this.listMIss.size();
    }

    public java.util.Iterator<Double> getListMIssIterator() {
      return (this.listMIss == null) ? null : this.listMIss.iterator();
    }

    public void addToListMIss(double elem) {
      if (this.listMIss == null) {
        this.listMIss = new ArrayList<Double>();
      }
      this.listMIss.add(elem);
    }

    public List<Double> getListMIss() {
      return this.listMIss;
    }

    public hillClimbingRandom_args setListMIss(List<Double> listMIss) {
      this.listMIss = listMIss;
      return this;
    }

    public void unsetListMIss() {
      this.listMIss = null;
    }

    /** Returns true if field listMIss is set (has been assigned a value) and false otherwise */
    public boolean isSetListMIss() {
      return this.listMIss != null;
    }

    public void setListMIssIsSet(boolean value) {
      if (!value) {
        this.listMIss = null;
      }
    }

    public int getListCacheSize() {
      return (this.listCache == null) ? 0 : this.listCache.size();
    }

    public java.util.Iterator<Double> getListCacheIterator() {
      return (this.listCache == null) ? null : this.listCache.iterator();
    }

    public void addToListCache(double elem) {
      if (this.listCache == null) {
        this.listCache = new ArrayList<Double>();
      }
      this.listCache.add(elem);
    }

    public List<Double> getListCache() {
      return this.listCache;
    }

    public hillClimbingRandom_args setListCache(List<Double> listCache) {
      this.listCache = listCache;
      return this;
    }

    public void unsetListCache() {
      this.listCache = null;
    }

    /** Returns true if field listCache is set (has been assigned a value) and false otherwise */
    public boolean isSetListCache() {
      return this.listCache != null;
    }

    public void setListCacheIsSet(boolean value) {
      if (!value) {
        this.listCache = null;
      }
    }

    public double getFrequency() {
      return this.frequency;
    }

    public hillClimbingRandom_args setFrequency(double frequency) {
      this.frequency = frequency;
      setFrequencyIsSet(true);
      return this;
    }

    public void unsetFrequency() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
    }

    /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
    public boolean isSetFrequency() {
      return EncodingUtils.testBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
    }

    public void setFrequencyIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQUENCY_ISSET_ID, value);
    }

    public double getSizeCacheMemory() {
      return this.sizeCacheMemory;
    }

    public hillClimbingRandom_args setSizeCacheMemory(double sizeCacheMemory) {
      this.sizeCacheMemory = sizeCacheMemory;
      setSizeCacheMemoryIsSet(true);
      return this;
    }

    public void unsetSizeCacheMemory() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZECACHEMEMORY_ISSET_ID);
    }

    /** Returns true if field sizeCacheMemory is set (has been assigned a value) and false otherwise */
    public boolean isSetSizeCacheMemory() {
      return EncodingUtils.testBit(__isset_bitfield, __SIZECACHEMEMORY_ISSET_ID);
    }

    public void setSizeCacheMemoryIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZECACHEMEMORY_ISSET_ID, value);
    }

    public double getIMemoryValue() {
      return this.iMemoryValue;
    }

    public hillClimbingRandom_args setIMemoryValue(double iMemoryValue) {
      this.iMemoryValue = iMemoryValue;
      setIMemoryValueIsSet(true);
      return this;
    }

    public void unsetIMemoryValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMEMORYVALUE_ISSET_ID);
    }

    /** Returns true if field iMemoryValue is set (has been assigned a value) and false otherwise */
    public boolean isSetIMemoryValue() {
      return EncodingUtils.testBit(__isset_bitfield, __IMEMORYVALUE_ISSET_ID);
    }

    public void setIMemoryValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMEMORYVALUE_ISSET_ID, value);
    }

    public double getSizeAcumulateMemory() {
      return this.sizeAcumulateMemory;
    }

    public hillClimbingRandom_args setSizeAcumulateMemory(double sizeAcumulateMemory) {
      this.sizeAcumulateMemory = sizeAcumulateMemory;
      setSizeAcumulateMemoryIsSet(true);
      return this;
    }

    public void unsetSizeAcumulateMemory() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZEACUMULATEMEMORY_ISSET_ID);
    }

    /** Returns true if field sizeAcumulateMemory is set (has been assigned a value) and false otherwise */
    public boolean isSetSizeAcumulateMemory() {
      return EncodingUtils.testBit(__isset_bitfield, __SIZEACUMULATEMEMORY_ISSET_ID);
    }

    public void setSizeAcumulateMemoryIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZEACUMULATEMEMORY_ISSET_ID, value);
    }

    public double getBd() {
      return this.bd;
    }

    public hillClimbingRandom_args setBd(double bd) {
      this.bd = bd;
      setBdIsSet(true);
      return this;
    }

    public void unsetBd() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BD_ISSET_ID);
    }

    /** Returns true if field bd is set (has been assigned a value) and false otherwise */
    public boolean isSetBd() {
      return EncodingUtils.testBit(__isset_bitfield, __BD_ISSET_ID);
    }

    public void setBdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BD_ISSET_ID, value);
    }

    public double getCd() {
      return this.cd;
    }

    public hillClimbingRandom_args setCd(double cd) {
      this.cd = cd;
      setCdIsSet(true);
      return this;
    }

    public void unsetCd() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CD_ISSET_ID);
    }

    /** Returns true if field cd is set (has been assigned a value) and false otherwise */
    public boolean isSetCd() {
      return EncodingUtils.testBit(__isset_bitfield, __CD_ISSET_ID);
    }

    public void setCdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CD_ISSET_ID, value);
    }

    public int getRandomSaltos() {
      return this.randomSaltos;
    }

    public hillClimbingRandom_args setRandomSaltos(int randomSaltos) {
      this.randomSaltos = randomSaltos;
      setRandomSaltosIsSet(true);
      return this;
    }

    public void unsetRandomSaltos() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANDOMSALTOS_ISSET_ID);
    }

    /** Returns true if field randomSaltos is set (has been assigned a value) and false otherwise */
    public boolean isSetRandomSaltos() {
      return EncodingUtils.testBit(__isset_bitfield, __RANDOMSALTOS_ISSET_ID);
    }

    public void setRandomSaltosIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANDOMSALTOS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_MISS:
        if (value == null) {
          unsetListMIss();
        } else {
          setListMIss((List<Double>)value);
        }
        break;

      case LIST_CACHE:
        if (value == null) {
          unsetListCache();
        } else {
          setListCache((List<Double>)value);
        }
        break;

      case FREQUENCY:
        if (value == null) {
          unsetFrequency();
        } else {
          setFrequency((Double)value);
        }
        break;

      case SIZE_CACHE_MEMORY:
        if (value == null) {
          unsetSizeCacheMemory();
        } else {
          setSizeCacheMemory((Double)value);
        }
        break;

      case I_MEMORY_VALUE:
        if (value == null) {
          unsetIMemoryValue();
        } else {
          setIMemoryValue((Double)value);
        }
        break;

      case SIZE_ACUMULATE_MEMORY:
        if (value == null) {
          unsetSizeAcumulateMemory();
        } else {
          setSizeAcumulateMemory((Double)value);
        }
        break;

      case BD:
        if (value == null) {
          unsetBd();
        } else {
          setBd((Double)value);
        }
        break;

      case CD:
        if (value == null) {
          unsetCd();
        } else {
          setCd((Double)value);
        }
        break;

      case RANDOM_SALTOS:
        if (value == null) {
          unsetRandomSaltos();
        } else {
          setRandomSaltos((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_MISS:
        return getListMIss();

      case LIST_CACHE:
        return getListCache();

      case FREQUENCY:
        return getFrequency();

      case SIZE_CACHE_MEMORY:
        return getSizeCacheMemory();

      case I_MEMORY_VALUE:
        return getIMemoryValue();

      case SIZE_ACUMULATE_MEMORY:
        return getSizeAcumulateMemory();

      case BD:
        return getBd();

      case CD:
        return getCd();

      case RANDOM_SALTOS:
        return getRandomSaltos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_MISS:
        return isSetListMIss();
      case LIST_CACHE:
        return isSetListCache();
      case FREQUENCY:
        return isSetFrequency();
      case SIZE_CACHE_MEMORY:
        return isSetSizeCacheMemory();
      case I_MEMORY_VALUE:
        return isSetIMemoryValue();
      case SIZE_ACUMULATE_MEMORY:
        return isSetSizeAcumulateMemory();
      case BD:
        return isSetBd();
      case CD:
        return isSetCd();
      case RANDOM_SALTOS:
        return isSetRandomSaltos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hillClimbingRandom_args)
        return this.equals((hillClimbingRandom_args)that);
      return false;
    }

    public boolean equals(hillClimbingRandom_args that) {
      if (that == null)
        return false;

      boolean this_present_listMIss = true && this.isSetListMIss();
      boolean that_present_listMIss = true && that.isSetListMIss();
      if (this_present_listMIss || that_present_listMIss) {
        if (!(this_present_listMIss && that_present_listMIss))
          return false;
        if (!this.listMIss.equals(that.listMIss))
          return false;
      }

      boolean this_present_listCache = true && this.isSetListCache();
      boolean that_present_listCache = true && that.isSetListCache();
      if (this_present_listCache || that_present_listCache) {
        if (!(this_present_listCache && that_present_listCache))
          return false;
        if (!this.listCache.equals(that.listCache))
          return false;
      }

      boolean this_present_frequency = true;
      boolean that_present_frequency = true;
      if (this_present_frequency || that_present_frequency) {
        if (!(this_present_frequency && that_present_frequency))
          return false;
        if (this.frequency != that.frequency)
          return false;
      }

      boolean this_present_sizeCacheMemory = true;
      boolean that_present_sizeCacheMemory = true;
      if (this_present_sizeCacheMemory || that_present_sizeCacheMemory) {
        if (!(this_present_sizeCacheMemory && that_present_sizeCacheMemory))
          return false;
        if (this.sizeCacheMemory != that.sizeCacheMemory)
          return false;
      }

      boolean this_present_iMemoryValue = true;
      boolean that_present_iMemoryValue = true;
      if (this_present_iMemoryValue || that_present_iMemoryValue) {
        if (!(this_present_iMemoryValue && that_present_iMemoryValue))
          return false;
        if (this.iMemoryValue != that.iMemoryValue)
          return false;
      }

      boolean this_present_sizeAcumulateMemory = true;
      boolean that_present_sizeAcumulateMemory = true;
      if (this_present_sizeAcumulateMemory || that_present_sizeAcumulateMemory) {
        if (!(this_present_sizeAcumulateMemory && that_present_sizeAcumulateMemory))
          return false;
        if (this.sizeAcumulateMemory != that.sizeAcumulateMemory)
          return false;
      }

      boolean this_present_bd = true;
      boolean that_present_bd = true;
      if (this_present_bd || that_present_bd) {
        if (!(this_present_bd && that_present_bd))
          return false;
        if (this.bd != that.bd)
          return false;
      }

      boolean this_present_cd = true;
      boolean that_present_cd = true;
      if (this_present_cd || that_present_cd) {
        if (!(this_present_cd && that_present_cd))
          return false;
        if (this.cd != that.cd)
          return false;
      }

      boolean this_present_randomSaltos = true;
      boolean that_present_randomSaltos = true;
      if (this_present_randomSaltos || that_present_randomSaltos) {
        if (!(this_present_randomSaltos && that_present_randomSaltos))
          return false;
        if (this.randomSaltos != that.randomSaltos)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listMIss = true && (isSetListMIss());
      list.add(present_listMIss);
      if (present_listMIss)
        list.add(listMIss);

      boolean present_listCache = true && (isSetListCache());
      list.add(present_listCache);
      if (present_listCache)
        list.add(listCache);

      boolean present_frequency = true;
      list.add(present_frequency);
      if (present_frequency)
        list.add(frequency);

      boolean present_sizeCacheMemory = true;
      list.add(present_sizeCacheMemory);
      if (present_sizeCacheMemory)
        list.add(sizeCacheMemory);

      boolean present_iMemoryValue = true;
      list.add(present_iMemoryValue);
      if (present_iMemoryValue)
        list.add(iMemoryValue);

      boolean present_sizeAcumulateMemory = true;
      list.add(present_sizeAcumulateMemory);
      if (present_sizeAcumulateMemory)
        list.add(sizeAcumulateMemory);

      boolean present_bd = true;
      list.add(present_bd);
      if (present_bd)
        list.add(bd);

      boolean present_cd = true;
      list.add(present_cd);
      if (present_cd)
        list.add(cd);

      boolean present_randomSaltos = true;
      list.add(present_randomSaltos);
      if (present_randomSaltos)
        list.add(randomSaltos);

      return list.hashCode();
    }

    @Override
    public int compareTo(hillClimbingRandom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListMIss()).compareTo(other.isSetListMIss());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListMIss()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listMIss, other.listMIss);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListCache()).compareTo(other.isSetListCache());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListCache()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listCache, other.listCache);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(other.isSetFrequency());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrequency()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, other.frequency);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSizeCacheMemory()).compareTo(other.isSetSizeCacheMemory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSizeCacheMemory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeCacheMemory, other.sizeCacheMemory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIMemoryValue()).compareTo(other.isSetIMemoryValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIMemoryValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iMemoryValue, other.iMemoryValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSizeAcumulateMemory()).compareTo(other.isSetSizeAcumulateMemory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSizeAcumulateMemory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeAcumulateMemory, other.sizeAcumulateMemory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBd()).compareTo(other.isSetBd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bd, other.bd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCd()).compareTo(other.isSetCd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cd, other.cd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRandomSaltos()).compareTo(other.isSetRandomSaltos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRandomSaltos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randomSaltos, other.randomSaltos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hillClimbingRandom_args(");
      boolean first = true;

      sb.append("listMIss:");
      if (this.listMIss == null) {
        sb.append("null");
      } else {
        sb.append(this.listMIss);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listCache:");
      if (this.listCache == null) {
        sb.append("null");
      } else {
        sb.append(this.listCache);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("frequency:");
      sb.append(this.frequency);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sizeCacheMemory:");
      sb.append(this.sizeCacheMemory);
      first = false;
      if (!first) sb.append(", ");
      sb.append("iMemoryValue:");
      sb.append(this.iMemoryValue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sizeAcumulateMemory:");
      sb.append(this.sizeAcumulateMemory);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bd:");
      sb.append(this.bd);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cd:");
      sb.append(this.cd);
      first = false;
      if (!first) sb.append(", ");
      sb.append("randomSaltos:");
      sb.append(this.randomSaltos);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hillClimbingRandom_argsStandardSchemeFactory implements SchemeFactory {
      public hillClimbingRandom_argsStandardScheme getScheme() {
        return new hillClimbingRandom_argsStandardScheme();
      }
    }

    private static class hillClimbingRandom_argsStandardScheme extends StandardScheme<hillClimbingRandom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hillClimbingRandom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_MISS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.listMIss = new ArrayList<Double>(_list16.size);
                  double _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readDouble();
                    struct.listMIss.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setListMIssIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_CACHE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                  struct.listCache = new ArrayList<Double>(_list19.size);
                  double _elem20;
                  for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                  {
                    _elem20 = iprot.readDouble();
                    struct.listCache.add(_elem20);
                  }
                  iprot.readListEnd();
                }
                struct.setListCacheIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FREQUENCY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.frequency = iprot.readDouble();
                struct.setFrequencyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SIZE_CACHE_MEMORY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.sizeCacheMemory = iprot.readDouble();
                struct.setSizeCacheMemoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // I_MEMORY_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.iMemoryValue = iprot.readDouble();
                struct.setIMemoryValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SIZE_ACUMULATE_MEMORY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.sizeAcumulateMemory = iprot.readDouble();
                struct.setSizeAcumulateMemoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // BD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.bd = iprot.readDouble();
                struct.setBdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.cd = iprot.readDouble();
                struct.setCdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // RANDOM_SALTOS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.randomSaltos = iprot.readI32();
                struct.setRandomSaltosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hillClimbingRandom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listMIss != null) {
          oprot.writeFieldBegin(LIST_MISS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.listMIss.size()));
            for (double _iter22 : struct.listMIss)
            {
              oprot.writeDouble(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.listCache != null) {
          oprot.writeFieldBegin(LIST_CACHE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.listCache.size()));
            for (double _iter23 : struct.listCache)
            {
              oprot.writeDouble(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
        oprot.writeDouble(struct.frequency);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_CACHE_MEMORY_FIELD_DESC);
        oprot.writeDouble(struct.sizeCacheMemory);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(I_MEMORY_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.iMemoryValue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_ACUMULATE_MEMORY_FIELD_DESC);
        oprot.writeDouble(struct.sizeAcumulateMemory);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BD_FIELD_DESC);
        oprot.writeDouble(struct.bd);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CD_FIELD_DESC);
        oprot.writeDouble(struct.cd);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RANDOM_SALTOS_FIELD_DESC);
        oprot.writeI32(struct.randomSaltos);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hillClimbingRandom_argsTupleSchemeFactory implements SchemeFactory {
      public hillClimbingRandom_argsTupleScheme getScheme() {
        return new hillClimbingRandom_argsTupleScheme();
      }
    }

    private static class hillClimbingRandom_argsTupleScheme extends TupleScheme<hillClimbingRandom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hillClimbingRandom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListMIss()) {
          optionals.set(0);
        }
        if (struct.isSetListCache()) {
          optionals.set(1);
        }
        if (struct.isSetFrequency()) {
          optionals.set(2);
        }
        if (struct.isSetSizeCacheMemory()) {
          optionals.set(3);
        }
        if (struct.isSetIMemoryValue()) {
          optionals.set(4);
        }
        if (struct.isSetSizeAcumulateMemory()) {
          optionals.set(5);
        }
        if (struct.isSetBd()) {
          optionals.set(6);
        }
        if (struct.isSetCd()) {
          optionals.set(7);
        }
        if (struct.isSetRandomSaltos()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetListMIss()) {
          {
            oprot.writeI32(struct.listMIss.size());
            for (double _iter24 : struct.listMIss)
            {
              oprot.writeDouble(_iter24);
            }
          }
        }
        if (struct.isSetListCache()) {
          {
            oprot.writeI32(struct.listCache.size());
            for (double _iter25 : struct.listCache)
            {
              oprot.writeDouble(_iter25);
            }
          }
        }
        if (struct.isSetFrequency()) {
          oprot.writeDouble(struct.frequency);
        }
        if (struct.isSetSizeCacheMemory()) {
          oprot.writeDouble(struct.sizeCacheMemory);
        }
        if (struct.isSetIMemoryValue()) {
          oprot.writeDouble(struct.iMemoryValue);
        }
        if (struct.isSetSizeAcumulateMemory()) {
          oprot.writeDouble(struct.sizeAcumulateMemory);
        }
        if (struct.isSetBd()) {
          oprot.writeDouble(struct.bd);
        }
        if (struct.isSetCd()) {
          oprot.writeDouble(struct.cd);
        }
        if (struct.isSetRandomSaltos()) {
          oprot.writeI32(struct.randomSaltos);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hillClimbingRandom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.listMIss = new ArrayList<Double>(_list26.size);
            double _elem27;
            for (int _i28 = 0; _i28 < _list26.size; ++_i28)
            {
              _elem27 = iprot.readDouble();
              struct.listMIss.add(_elem27);
            }
          }
          struct.setListMIssIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.listCache = new ArrayList<Double>(_list29.size);
            double _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readDouble();
              struct.listCache.add(_elem30);
            }
          }
          struct.setListCacheIsSet(true);
        }
        if (incoming.get(2)) {
          struct.frequency = iprot.readDouble();
          struct.setFrequencyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sizeCacheMemory = iprot.readDouble();
          struct.setSizeCacheMemoryIsSet(true);
        }
        if (incoming.get(4)) {
          struct.iMemoryValue = iprot.readDouble();
          struct.setIMemoryValueIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sizeAcumulateMemory = iprot.readDouble();
          struct.setSizeAcumulateMemoryIsSet(true);
        }
        if (incoming.get(6)) {
          struct.bd = iprot.readDouble();
          struct.setBdIsSet(true);
        }
        if (incoming.get(7)) {
          struct.cd = iprot.readDouble();
          struct.setCdIsSet(true);
        }
        if (incoming.get(8)) {
          struct.randomSaltos = iprot.readI32();
          struct.setRandomSaltosIsSet(true);
        }
      }
    }

  }

  public static class hillClimbingRandom_result implements org.apache.thrift.TBase<hillClimbingRandom_result, hillClimbingRandom_result._Fields>, java.io.Serializable, Cloneable, Comparable<hillClimbingRandom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hillClimbingRandom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hillClimbingRandom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hillClimbingRandom_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hillClimbingRandom_result.class, metaDataMap);
    }

    public hillClimbingRandom_result() {
    }

    public hillClimbingRandom_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hillClimbingRandom_result(hillClimbingRandom_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public hillClimbingRandom_result deepCopy() {
      return new hillClimbingRandom_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public hillClimbingRandom_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hillClimbingRandom_result)
        return this.equals((hillClimbingRandom_result)that);
      return false;
    }

    public boolean equals(hillClimbingRandom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hillClimbingRandom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hillClimbingRandom_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hillClimbingRandom_resultStandardSchemeFactory implements SchemeFactory {
      public hillClimbingRandom_resultStandardScheme getScheme() {
        return new hillClimbingRandom_resultStandardScheme();
      }
    }

    private static class hillClimbingRandom_resultStandardScheme extends StandardScheme<hillClimbingRandom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hillClimbingRandom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hillClimbingRandom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hillClimbingRandom_resultTupleSchemeFactory implements SchemeFactory {
      public hillClimbingRandom_resultTupleScheme getScheme() {
        return new hillClimbingRandom_resultTupleScheme();
      }
    }

    private static class hillClimbingRandom_resultTupleScheme extends TupleScheme<hillClimbingRandom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hillClimbingRandom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hillClimbingRandom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
