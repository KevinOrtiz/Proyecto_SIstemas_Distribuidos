/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ejemplo1;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-14")
public class pruebaSuma {

  public interface Iface {

    public void restar(int number1, int number2) throws org.apache.thrift.TException;

    public void sumar(int number1, int number2) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void restar(int number1, int number2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sumar(int number1, int number2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void restar(int number1, int number2) throws org.apache.thrift.TException
    {
      send_restar(number1, number2);
      recv_restar();
    }

    public void send_restar(int number1, int number2) throws org.apache.thrift.TException
    {
      restar_args args = new restar_args();
      args.setNumber1(number1);
      args.setNumber2(number2);
      sendBase("restar", args);
    }

    public void recv_restar() throws org.apache.thrift.TException
    {
      restar_result result = new restar_result();
      receiveBase(result, "restar");
      return;
    }

    public void sumar(int number1, int number2) throws org.apache.thrift.TException
    {
      send_sumar(number1, number2);
      recv_sumar();
    }

    public void send_sumar(int number1, int number2) throws org.apache.thrift.TException
    {
      sumar_args args = new sumar_args();
      args.setNumber1(number1);
      args.setNumber2(number2);
      sendBase("sumar", args);
    }

    public void recv_sumar() throws org.apache.thrift.TException
    {
      sumar_result result = new sumar_result();
      receiveBase(result, "sumar");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void restar(int number1, int number2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restar_call method_call = new restar_call(number1, number2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int number1;
      private int number2;
      public restar_call(int number1, int number2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.number1 = number1;
        this.number2 = number2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restar_args args = new restar_args();
        args.setNumber1(number1);
        args.setNumber2(number2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_restar();
      }
    }

    public void sumar(int number1, int number2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sumar_call method_call = new sumar_call(number1, number2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sumar_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int number1;
      private int number2;
      public sumar_call(int number1, int number2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.number1 = number1;
        this.number2 = number2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sumar", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sumar_args args = new sumar_args();
        args.setNumber1(number1);
        args.setNumber2(number2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sumar();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("restar", new restar());
      processMap.put("sumar", new sumar());
      return processMap;
    }

    public static class restar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restar_args> {
      public restar() {
        super("restar");
      }

      public restar_args getEmptyArgsInstance() {
        return new restar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public restar_result getResult(I iface, restar_args args) throws org.apache.thrift.TException {
        restar_result result = new restar_result();
        iface.restar(args.number1, args.number2);
        return result;
      }
    }

    public static class sumar<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sumar_args> {
      public sumar() {
        super("sumar");
      }

      public sumar_args getEmptyArgsInstance() {
        return new sumar_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sumar_result getResult(I iface, sumar_args args) throws org.apache.thrift.TException {
        sumar_result result = new sumar_result();
        iface.sumar(args.number1, args.number2);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("restar", new restar());
      processMap.put("sumar", new sumar());
      return processMap;
    }

    public static class restar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restar_args, Void> {
      public restar() {
        super("restar");
      }

      public restar_args getEmptyArgsInstance() {
        return new restar_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            restar_result result = new restar_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            restar_result result = new restar_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restar_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.restar(args.number1, args.number2,resultHandler);
      }
    }

    public static class sumar<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sumar_args, Void> {
      public sumar() {
        super("sumar");
      }

      public sumar_args getEmptyArgsInstance() {
        return new sumar_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sumar_result result = new sumar_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sumar_result result = new sumar_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sumar_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sumar(args.number1, args.number2,resultHandler);
      }
    }

  }

  public static class restar_args implements org.apache.thrift.TBase<restar_args, restar_args._Fields>, java.io.Serializable, Cloneable, Comparable<restar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restar_args");

    private static final org.apache.thrift.protocol.TField NUMBER1_FIELD_DESC = new org.apache.thrift.protocol.TField("number1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NUMBER2_FIELD_DESC = new org.apache.thrift.protocol.TField("number2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restar_argsTupleSchemeFactory());
    }

    public int number1; // required
    public int number2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMBER1((short)1, "number1"),
      NUMBER2((short)2, "number2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMBER1
            return NUMBER1;
          case 2: // NUMBER2
            return NUMBER2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBER1_ISSET_ID = 0;
    private static final int __NUMBER2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMBER1, new org.apache.thrift.meta_data.FieldMetaData("number1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUMBER2, new org.apache.thrift.meta_data.FieldMetaData("number2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restar_args.class, metaDataMap);
    }

    public restar_args() {
    }

    public restar_args(
      int number1,
      int number2)
    {
      this();
      this.number1 = number1;
      setNumber1IsSet(true);
      this.number2 = number2;
      setNumber2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restar_args(restar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.number1 = other.number1;
      this.number2 = other.number2;
    }

    public restar_args deepCopy() {
      return new restar_args(this);
    }

    @Override
    public void clear() {
      setNumber1IsSet(false);
      this.number1 = 0;
      setNumber2IsSet(false);
      this.number2 = 0;
    }

    public int getNumber1() {
      return this.number1;
    }

    public restar_args setNumber1(int number1) {
      this.number1 = number1;
      setNumber1IsSet(true);
      return this;
    }

    public void unsetNumber1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER1_ISSET_ID);
    }

    /** Returns true if field number1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber1() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER1_ISSET_ID);
    }

    public void setNumber1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER1_ISSET_ID, value);
    }

    public int getNumber2() {
      return this.number2;
    }

    public restar_args setNumber2(int number2) {
      this.number2 = number2;
      setNumber2IsSet(true);
      return this;
    }

    public void unsetNumber2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER2_ISSET_ID);
    }

    /** Returns true if field number2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber2() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER2_ISSET_ID);
    }

    public void setNumber2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUMBER1:
        if (value == null) {
          unsetNumber1();
        } else {
          setNumber1((Integer)value);
        }
        break;

      case NUMBER2:
        if (value == null) {
          unsetNumber2();
        } else {
          setNumber2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMBER1:
        return getNumber1();

      case NUMBER2:
        return getNumber2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUMBER1:
        return isSetNumber1();
      case NUMBER2:
        return isSetNumber2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restar_args)
        return this.equals((restar_args)that);
      return false;
    }

    public boolean equals(restar_args that) {
      if (that == null)
        return false;

      boolean this_present_number1 = true;
      boolean that_present_number1 = true;
      if (this_present_number1 || that_present_number1) {
        if (!(this_present_number1 && that_present_number1))
          return false;
        if (this.number1 != that.number1)
          return false;
      }

      boolean this_present_number2 = true;
      boolean that_present_number2 = true;
      if (this_present_number2 || that_present_number2) {
        if (!(this_present_number2 && that_present_number2))
          return false;
        if (this.number2 != that.number2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_number1 = true;
      list.add(present_number1);
      if (present_number1)
        list.add(number1);

      boolean present_number2 = true;
      list.add(present_number2);
      if (present_number2)
        list.add(number2);

      return list.hashCode();
    }

    @Override
    public int compareTo(restar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNumber1()).compareTo(other.isSetNumber1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number1, other.number1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber2()).compareTo(other.isSetNumber2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number2, other.number2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restar_args(");
      boolean first = true;

      sb.append("number1:");
      sb.append(this.number1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number2:");
      sb.append(this.number2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restar_argsStandardSchemeFactory implements SchemeFactory {
      public restar_argsStandardScheme getScheme() {
        return new restar_argsStandardScheme();
      }
    }

    private static class restar_argsStandardScheme extends StandardScheme<restar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMBER1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number1 = iprot.readI32();
                struct.setNumber1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMBER2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number2 = iprot.readI32();
                struct.setNumber2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER1_FIELD_DESC);
        oprot.writeI32(struct.number1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER2_FIELD_DESC);
        oprot.writeI32(struct.number2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restar_argsTupleSchemeFactory implements SchemeFactory {
      public restar_argsTupleScheme getScheme() {
        return new restar_argsTupleScheme();
      }
    }

    private static class restar_argsTupleScheme extends TupleScheme<restar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumber1()) {
          optionals.set(0);
        }
        if (struct.isSetNumber2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNumber1()) {
          oprot.writeI32(struct.number1);
        }
        if (struct.isSetNumber2()) {
          oprot.writeI32(struct.number2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.number1 = iprot.readI32();
          struct.setNumber1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.number2 = iprot.readI32();
          struct.setNumber2IsSet(true);
        }
      }
    }

  }

  public static class restar_result implements org.apache.thrift.TBase<restar_result, restar_result._Fields>, java.io.Serializable, Cloneable, Comparable<restar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restar_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restar_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restar_result.class, metaDataMap);
    }

    public restar_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restar_result(restar_result other) {
    }

    public restar_result deepCopy() {
      return new restar_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restar_result)
        return this.equals((restar_result)that);
      return false;
    }

    public boolean equals(restar_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(restar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restar_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restar_resultStandardSchemeFactory implements SchemeFactory {
      public restar_resultStandardScheme getScheme() {
        return new restar_resultStandardScheme();
      }
    }

    private static class restar_resultStandardScheme extends StandardScheme<restar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restar_resultTupleSchemeFactory implements SchemeFactory {
      public restar_resultTupleScheme getScheme() {
        return new restar_resultTupleScheme();
      }
    }

    private static class restar_resultTupleScheme extends TupleScheme<restar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sumar_args implements org.apache.thrift.TBase<sumar_args, sumar_args._Fields>, java.io.Serializable, Cloneable, Comparable<sumar_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumar_args");

    private static final org.apache.thrift.protocol.TField NUMBER1_FIELD_DESC = new org.apache.thrift.protocol.TField("number1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NUMBER2_FIELD_DESC = new org.apache.thrift.protocol.TField("number2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sumar_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sumar_argsTupleSchemeFactory());
    }

    public int number1; // required
    public int number2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMBER1((short)1, "number1"),
      NUMBER2((short)2, "number2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMBER1
            return NUMBER1;
          case 2: // NUMBER2
            return NUMBER2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBER1_ISSET_ID = 0;
    private static final int __NUMBER2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMBER1, new org.apache.thrift.meta_data.FieldMetaData("number1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUMBER2, new org.apache.thrift.meta_data.FieldMetaData("number2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumar_args.class, metaDataMap);
    }

    public sumar_args() {
    }

    public sumar_args(
      int number1,
      int number2)
    {
      this();
      this.number1 = number1;
      setNumber1IsSet(true);
      this.number2 = number2;
      setNumber2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumar_args(sumar_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.number1 = other.number1;
      this.number2 = other.number2;
    }

    public sumar_args deepCopy() {
      return new sumar_args(this);
    }

    @Override
    public void clear() {
      setNumber1IsSet(false);
      this.number1 = 0;
      setNumber2IsSet(false);
      this.number2 = 0;
    }

    public int getNumber1() {
      return this.number1;
    }

    public sumar_args setNumber1(int number1) {
      this.number1 = number1;
      setNumber1IsSet(true);
      return this;
    }

    public void unsetNumber1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER1_ISSET_ID);
    }

    /** Returns true if field number1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber1() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER1_ISSET_ID);
    }

    public void setNumber1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER1_ISSET_ID, value);
    }

    public int getNumber2() {
      return this.number2;
    }

    public sumar_args setNumber2(int number2) {
      this.number2 = number2;
      setNumber2IsSet(true);
      return this;
    }

    public void unsetNumber2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER2_ISSET_ID);
    }

    /** Returns true if field number2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber2() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBER2_ISSET_ID);
    }

    public void setNumber2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUMBER1:
        if (value == null) {
          unsetNumber1();
        } else {
          setNumber1((Integer)value);
        }
        break;

      case NUMBER2:
        if (value == null) {
          unsetNumber2();
        } else {
          setNumber2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMBER1:
        return getNumber1();

      case NUMBER2:
        return getNumber2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUMBER1:
        return isSetNumber1();
      case NUMBER2:
        return isSetNumber2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumar_args)
        return this.equals((sumar_args)that);
      return false;
    }

    public boolean equals(sumar_args that) {
      if (that == null)
        return false;

      boolean this_present_number1 = true;
      boolean that_present_number1 = true;
      if (this_present_number1 || that_present_number1) {
        if (!(this_present_number1 && that_present_number1))
          return false;
        if (this.number1 != that.number1)
          return false;
      }

      boolean this_present_number2 = true;
      boolean that_present_number2 = true;
      if (this_present_number2 || that_present_number2) {
        if (!(this_present_number2 && that_present_number2))
          return false;
        if (this.number2 != that.number2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_number1 = true;
      list.add(present_number1);
      if (present_number1)
        list.add(number1);

      boolean present_number2 = true;
      list.add(present_number2);
      if (present_number2)
        list.add(number2);

      return list.hashCode();
    }

    @Override
    public int compareTo(sumar_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNumber1()).compareTo(other.isSetNumber1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number1, other.number1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumber2()).compareTo(other.isSetNumber2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumber2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number2, other.number2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumar_args(");
      boolean first = true;

      sb.append("number1:");
      sb.append(this.number1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("number2:");
      sb.append(this.number2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumar_argsStandardSchemeFactory implements SchemeFactory {
      public sumar_argsStandardScheme getScheme() {
        return new sumar_argsStandardScheme();
      }
    }

    private static class sumar_argsStandardScheme extends StandardScheme<sumar_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumar_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMBER1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number1 = iprot.readI32();
                struct.setNumber1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMBER2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.number2 = iprot.readI32();
                struct.setNumber2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumar_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER1_FIELD_DESC);
        oprot.writeI32(struct.number1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER2_FIELD_DESC);
        oprot.writeI32(struct.number2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumar_argsTupleSchemeFactory implements SchemeFactory {
      public sumar_argsTupleScheme getScheme() {
        return new sumar_argsTupleScheme();
      }
    }

    private static class sumar_argsTupleScheme extends TupleScheme<sumar_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNumber1()) {
          optionals.set(0);
        }
        if (struct.isSetNumber2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNumber1()) {
          oprot.writeI32(struct.number1);
        }
        if (struct.isSetNumber2()) {
          oprot.writeI32(struct.number2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumar_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.number1 = iprot.readI32();
          struct.setNumber1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.number2 = iprot.readI32();
          struct.setNumber2IsSet(true);
        }
      }
    }

  }

  public static class sumar_result implements org.apache.thrift.TBase<sumar_result, sumar_result._Fields>, java.io.Serializable, Cloneable, Comparable<sumar_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumar_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sumar_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sumar_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumar_result.class, metaDataMap);
    }

    public sumar_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumar_result(sumar_result other) {
    }

    public sumar_result deepCopy() {
      return new sumar_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumar_result)
        return this.equals((sumar_result)that);
      return false;
    }

    public boolean equals(sumar_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(sumar_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumar_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumar_resultStandardSchemeFactory implements SchemeFactory {
      public sumar_resultStandardScheme getScheme() {
        return new sumar_resultStandardScheme();
      }
    }

    private static class sumar_resultStandardScheme extends StandardScheme<sumar_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumar_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumar_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumar_resultTupleSchemeFactory implements SchemeFactory {
      public sumar_resultTupleScheme getScheme() {
        return new sumar_resultTupleScheme();
      }
    }

    private static class sumar_resultTupleScheme extends TupleScheme<sumar_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumar_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
